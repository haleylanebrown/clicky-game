{"version":3,"sources":["components/card/Card.js","components/wrapper/wrapper.js","components/title/title.js","components/navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","setClicked","id","alt","name","src","image","Wrapper","children","Title","NavBar","message","score","bestScore","correctGuesses","clickMessage","App","state","friends","_this","clickedFriend","filter","friend","clicked","i","length","sort","b","Math","random","setState","_this2","this","Fragment","navbar_navbar","title_title","wrapper_wrapper","map","card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAceA,MAVf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,QAAW,kBAAML,EAAMM,WAAWN,EAAMO,KAAKH,UAAU,iBAC1DH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,kBCC1BC,MANf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,WACPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,mBCMnBC,MARf,WACE,OAAOb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACzBH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAAA,qGCMaY,MAVf,SAAgBf,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACtBH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAMgB,SACXf,EAAAC,EAAAC,cAAA,qBAAaH,EAAMiB,MAAnB,iBAAwCjB,EAAMkB,cCE9CC,UAAiB,GACjBD,EAAY,EACZE,EAAe,8BA2GJC,6MAxGbC,MAAQ,CACNC,UACAJ,iBACAD,YACAE,kBAGFd,WAAa,SAAAC,GAEX,IAAMgB,EAAUC,EAAKF,MAAMC,QAErBE,EAAgBF,EAAQG,OAAO,SAAAC,GAAM,OAAIA,EAAOpB,KAAOA,IAG7D,GAAIkB,EAAc,GAAGG,QAAQ,CACzBT,EAAiB,EACjBC,EAAe,2BAEf,IAAK,IAAIS,EAAI,EAAIA,EAAIN,EAAQO,OAASD,IAClCN,EAAQM,GAAGD,SAAU,EAIvBL,EAAQQ,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAEhDV,EAAKW,SAAS,CAACf,iBACfI,EAAKW,SAAS,CAAChB,mBACfK,EAAKW,SAAS,CAACZ,iBAGZ,GAAIJ,EAAiB,GAGxBM,EAAc,GAAGG,SAAU,EAK3BR,EAAe,2BAFfD,EAIqBD,IACjBA,EAAYC,EACZK,EAAKW,SAAS,CAAEjB,eAIpBK,EAAQQ,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9CV,EAAKW,SAAS,CAAEZ,YAChBC,EAAKW,SAAS,CAAChB,mBACfK,EAAKW,SAAS,CAACf,qBACZ,CAGHK,EAAc,GAAGG,SAAU,EAG3BT,EAAiB,EAGjBC,EAAe,uBACfF,EAAY,GACZM,EAAKW,SAAS,CAAEjB,cAEhB,IAAK,IAAIW,EAAI,EAAIA,EAAIN,EAAQO,OAASD,IAClCN,EAAQM,GAAGD,SAAU,EAIzBL,EAAQQ,KAAK,SAAS7B,EAAG8B,GAAG,MAAO,GAAMC,KAAKC,WAG9CV,EAAKW,SAAS,CAAEZ,YAChBC,EAAKW,SAAS,CAAChB,mBACfK,EAAKW,SAAS,CAACf,2FAMZ,IAAAgB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACArC,EAAAC,EAAAC,cAACoC,EAAD,CACAvB,QAAWqB,KAAKf,MAAMF,aACtBH,MAASoB,KAAKf,MAAMH,eACpBD,UAAamB,KAAKf,MAAMJ,YACxBjB,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,KACGJ,KAAKf,MAAMC,QAAQmB,IAAI,SAAAf,GAAM,OAC5B1B,EAAAC,EAAAC,cAACwC,EAAD,CACErC,WAAc8B,EAAK9B,WACnBC,GAAIoB,EAAOpB,GACXqC,IAAKjB,EAAOpB,GACZI,MAAOgB,EAAOhB,mBAhGRkC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7bd143f4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\nimport { isProperty } from \"@babel/types\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div onClick = {() => props.setClicked(props.id)} className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div>\n  <div className=\"wrapper\">{props.children}</div>\n  </div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./title.css\";\n\nfunction Title() {\n  return <header className=\"header\">\n  <h1>Hipster Clicky Game</h1>\n  <h2>Click on a hipster to earn points, but don't click on any more than once!</h2>\n  <h3>It might be tricky, because let's be real - all hipsters look the same</h3>\n  </header>;\n}\n\nexport default Title;","import React from \"react\";\nimport \"./navbar.css\";\n\nfunction NavBar(props) {\n  return <nav className=\"navbar\">\n  <ul>\n    <li>Clicky Game</li>\n    <li>{props.message}</li>\n    <li>Score : {props.score} | Top Score: {props.bestScore}</li>\n  </ul>\n  </nav>;\n}\n\nexport default NavBar;","import React, { Component } from \"react\";\nimport FriendCard from \"./components/card/Card\";\nimport Wrapper from \"./components/wrapper/wrapper\";\nimport Title from \"./components/title/title\";\nimport friends from \"./friends.json\";\nimport NavBar from \"./components/navbar/navbar\"\nimport \"./App.css\";\nimport { restElement } from \"@babel/types\";\n\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet clickMessage = \"Click on an image to begin!\";\n\nclass App extends Component {\n  state = {\n    friends,\n    correctGuesses,\n    bestScore,\n    clickMessage\n  };\n\n  setClicked = id => {\n    // Make a copy of the state matches array to work with\n    const friends = this.state.friends;\n    // Filter for the clicked match\n    const clickedFriend = friends.filter(friend => friend.id === id);\n    // If the matched image's clicked value is already true, \n    // do the game over actions\n    if (clickedFriend[0].clicked){\n        correctGuesses = 0;\n        clickMessage = \"You guessed incorrectly!\"\n\n        for (let i = 0 ; i < friends.length ; i++){\n            friends[i].clicked = false;\n        }\n\n          // Shuffle the array to be rendered in a random order\n          friends.sort(function(a, b){return 0.5 - Math.random()});\n          \n        this.setState({clickMessage});\n        this.setState({correctGuesses});\n        this.setState({friends});\n\n    // Otherwise, if clicked = false, and the user hasn't finished\n    } else if (correctGuesses < 11) {\n\n        // Set its value to true\n        clickedFriend[0].clicked = true;\n\n        // increment the appropriate counter\n        correctGuesses++;\n        \n        clickMessage = \"You guessed correctly!\";\n\n        if (correctGuesses > bestScore){\n            bestScore = correctGuesses;\n            this.setState({ bestScore });\n        }\n\n        // Shuffle the array to be rendered in a random order\n        friends.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.matches equal to the new matches array\n        this.setState({ friends });\n        this.setState({correctGuesses});\n        this.setState({clickMessage});\n    } else {\n\n        // Set its value to true\n        clickedFriend[0].clicked = true;\n\n        // restart the guess counter\n        correctGuesses = 0;\n\n        // Egg on the user to play again\n        clickMessage = \"YOU WON! Play again?\";\n        bestScore = 12;\n        this.setState({ bestScore });\n        \n        for (let i = 0 ; i < friends.length ; i++){\n            friends[i].clicked = false;\n        }\n\n        // Shuffle the array to be rendered in a random order\n        friends.sort(function(a, b){return 0.5 - Math.random()});\n\n        // Set this.state.matches equal to the new matches array\n        this.setState({ friends });\n        this.setState({correctGuesses});\n        this.setState({clickMessage});\n\n    }\n};\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <>\n      <NavBar \n      message = {this.state.clickMessage} \n      score = {this.state.correctGuesses} \n      bestScore = {this.state.bestScore}/>\n      <Title/>\n      <Wrapper>\n        {this.state.friends.map(friend => (\n          <FriendCard \n            setClicked = {this.setClicked}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}